"use client";
import {
  require_jsx_runtime
} from "./chunk-IULEFUF5.js";
import {
  require_react
} from "./chunk-I773Y2XN.js";
import {
  __commonJS
} from "./chunk-LK32TJAX.js";

// node_modules/clsx/dist/clsx.js
var require_clsx = __commonJS({
  "node_modules/clsx/dist/clsx.js"(exports, module) {
    function r(e2) {
      var o, t, f = "";
      if ("string" == typeof e2 || "number" == typeof e2) f += e2;
      else if ("object" == typeof e2) if (Array.isArray(e2)) {
        var n = e2.length;
        for (o = 0; o < n; o++) e2[o] && (t = r(e2[o])) && (f && (f += " "), f += t);
      } else for (t in e2) e2[t] && (f && (f += " "), f += t);
      return f;
    }
    function e() {
      for (var e2, o, t = 0, f = "", n = arguments.length; t < n; t++) (e2 = arguments[t]) && (o = r(e2)) && (f && (f += " "), f += o);
      return f;
    }
    module.exports = e, module.exports.clsx = e;
  }
});

// node_modules/mimic-fn/index.js
var require_mimic_fn = __commonJS({
  "node_modules/mimic-fn/index.js"(exports, module) {
    "use strict";
    var copyProperty = (to, from, property, ignoreNonConfigurable) => {
      if (property === "length" || property === "prototype") {
        return;
      }
      if (property === "arguments" || property === "caller") {
        return;
      }
      const toDescriptor = Object.getOwnPropertyDescriptor(to, property);
      const fromDescriptor = Object.getOwnPropertyDescriptor(from, property);
      if (!canCopyProperty(toDescriptor, fromDescriptor) && ignoreNonConfigurable) {
        return;
      }
      Object.defineProperty(to, property, fromDescriptor);
    };
    var canCopyProperty = function(toDescriptor, fromDescriptor) {
      return toDescriptor === void 0 || toDescriptor.configurable || toDescriptor.writable === fromDescriptor.writable && toDescriptor.enumerable === fromDescriptor.enumerable && toDescriptor.configurable === fromDescriptor.configurable && (toDescriptor.writable || toDescriptor.value === fromDescriptor.value);
    };
    var changePrototype = (to, from) => {
      const fromPrototype = Object.getPrototypeOf(from);
      if (fromPrototype === Object.getPrototypeOf(to)) {
        return;
      }
      Object.setPrototypeOf(to, fromPrototype);
    };
    var wrappedToString = (withName, fromBody) => `/* Wrapped ${withName}*/
${fromBody}`;
    var toStringDescriptor = Object.getOwnPropertyDescriptor(Function.prototype, "toString");
    var toStringName = Object.getOwnPropertyDescriptor(Function.prototype.toString, "name");
    var changeToString = (to, from, name) => {
      const withName = name === "" ? "" : `with ${name.trim()}() `;
      const newToString = wrappedToString.bind(null, withName, from.toString());
      Object.defineProperty(newToString, "name", toStringName);
      Object.defineProperty(to, "toString", { ...toStringDescriptor, value: newToString });
    };
    var mimicFn = (to, from, { ignoreNonConfigurable = false } = {}) => {
      const { name } = to;
      for (const property of Reflect.ownKeys(from)) {
        copyProperty(to, from, property, ignoreNonConfigurable);
      }
      changePrototype(to, from);
      changeToString(to, from, name);
      return to;
    };
    module.exports = mimicFn;
  }
});

// node_modules/p-defer/index.js
var require_p_defer = __commonJS({
  "node_modules/p-defer/index.js"(exports, module) {
    "use strict";
    module.exports = () => {
      const ret = {};
      ret.promise = new Promise((resolve, reject) => {
        ret.resolve = resolve;
        ret.reject = reject;
      });
      return ret;
    };
  }
});

// node_modules/map-age-cleaner/dist/index.js
var require_dist = __commonJS({
  "node_modules/map-age-cleaner/dist/index.js"(exports, module) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var p_defer_1 = __importDefault(require_p_defer());
    function mapAgeCleaner(map, property = "maxAge") {
      let processingKey;
      let processingTimer;
      let processingDeferred;
      const cleanup = () => __awaiter(this, void 0, void 0, function* () {
        if (processingKey !== void 0) {
          return;
        }
        const setupTimer = (item) => __awaiter(this, void 0, void 0, function* () {
          processingDeferred = p_defer_1.default();
          const delay = item[1][property] - Date.now();
          if (delay <= 0) {
            map.delete(item[0]);
            processingDeferred.resolve();
            return;
          }
          processingKey = item[0];
          processingTimer = setTimeout(() => {
            map.delete(item[0]);
            if (processingDeferred) {
              processingDeferred.resolve();
            }
          }, delay);
          if (typeof processingTimer.unref === "function") {
            processingTimer.unref();
          }
          return processingDeferred.promise;
        });
        try {
          for (const entry of map) {
            yield setupTimer(entry);
          }
        } catch (_a) {
        }
        processingKey = void 0;
      });
      const reset = () => {
        processingKey = void 0;
        if (processingTimer !== void 0) {
          clearTimeout(processingTimer);
          processingTimer = void 0;
        }
        if (processingDeferred !== void 0) {
          processingDeferred.reject(void 0);
          processingDeferred = void 0;
        }
      };
      const originalSet = map.set.bind(map);
      map.set = (key, value) => {
        if (map.has(key)) {
          map.delete(key);
        }
        const result = originalSet(key, value);
        if (processingKey && processingKey === key) {
          reset();
        }
        cleanup();
        return result;
      };
      cleanup();
      return map;
    }
    exports.default = mapAgeCleaner;
    module.exports = mapAgeCleaner;
    module.exports.default = mapAgeCleaner;
  }
});

// node_modules/mem/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/mem/dist/index.js"(exports, module) {
    "use strict";
    var mimicFn = require_mimic_fn();
    var mapAgeCleaner = require_dist();
    var decoratorInstanceMap = /* @__PURE__ */ new WeakMap();
    var cacheStore = /* @__PURE__ */ new WeakMap();
    var mem = (fn, { cacheKey, cache = /* @__PURE__ */ new Map(), maxAge } = {}) => {
      if (typeof maxAge === "number") {
        mapAgeCleaner(cache);
      }
      const memoized = function(...arguments_) {
        const key = cacheKey ? cacheKey(arguments_) : arguments_[0];
        const cacheItem = cache.get(key);
        if (cacheItem) {
          return cacheItem.data;
        }
        const result = fn.apply(this, arguments_);
        cache.set(key, {
          data: result,
          maxAge: maxAge ? Date.now() + maxAge : Number.POSITIVE_INFINITY
        });
        return result;
      };
      mimicFn(memoized, fn, {
        ignoreNonConfigurable: true
      });
      cacheStore.set(memoized, cache);
      return memoized;
    };
    mem.decorator = (options = {}) => (target, propertyKey, descriptor) => {
      const input = target[propertyKey];
      if (typeof input !== "function") {
        throw new TypeError("The decorated value must be a function");
      }
      delete descriptor.value;
      delete descriptor.writable;
      descriptor.get = function() {
        if (!decoratorInstanceMap.has(this)) {
          const value = mem(input, options);
          decoratorInstanceMap.set(this, value);
          return value;
        }
        return decoratorInstanceMap.get(this);
      };
    };
    mem.clear = (fn) => {
      const cache = cacheStore.get(fn);
      if (!cache) {
        throw new TypeError("Can't clear a function that was not memoized!");
      }
      if (typeof cache.clear !== "function") {
        throw new TypeError("The cache Map can't be cleared!");
      }
      cache.clear();
    };
    module.exports = mem;
  }
});

// node_modules/get-user-locale/dist/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/get-user-locale/dist/cjs/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUserLocale = exports.getUserLocales = void 0;
    var mem_1 = __importDefault(require_dist2());
    function isString(el) {
      return typeof el === "string";
    }
    function isUnique(el, index, arr) {
      return arr.indexOf(el) === index;
    }
    function isAllLowerCase(el) {
      return el.toLowerCase() === el;
    }
    function fixCommas(el) {
      return el.indexOf(",") === -1 ? el : el.split(",");
    }
    function normalizeLocale(locale) {
      if (!locale) {
        return locale;
      }
      if (locale === "C" || locale === "posix" || locale === "POSIX") {
        return "en-US";
      }
      if (locale.indexOf(".") !== -1) {
        var _a = locale.split(".")[0], actualLocale = _a === void 0 ? "" : _a;
        return normalizeLocale(actualLocale);
      }
      if (locale.indexOf("@") !== -1) {
        var _b = locale.split("@")[0], actualLocale = _b === void 0 ? "" : _b;
        return normalizeLocale(actualLocale);
      }
      if (locale.indexOf("-") === -1 || !isAllLowerCase(locale)) {
        return locale;
      }
      var _c = locale.split("-"), splitEl1 = _c[0], _d = _c[1], splitEl2 = _d === void 0 ? "" : _d;
      return "".concat(splitEl1, "-").concat(splitEl2.toUpperCase());
    }
    function getUserLocalesInternal(_a) {
      var _b = _a === void 0 ? {} : _a, _c = _b.useFallbackLocale, useFallbackLocale = _c === void 0 ? true : _c, _d = _b.fallbackLocale, fallbackLocale = _d === void 0 ? "en-US" : _d;
      var languageList = [];
      if (typeof navigator !== "undefined") {
        var rawLanguages = navigator.languages || [];
        var languages = [];
        for (var _i = 0, rawLanguages_1 = rawLanguages; _i < rawLanguages_1.length; _i++) {
          var rawLanguagesItem = rawLanguages_1[_i];
          languages = languages.concat(fixCommas(rawLanguagesItem));
        }
        var rawLanguage = navigator.language;
        var language = rawLanguage ? fixCommas(rawLanguage) : rawLanguage;
        languageList = languageList.concat(languages, language);
      }
      if (useFallbackLocale) {
        languageList.push(fallbackLocale);
      }
      return languageList.filter(isString).map(normalizeLocale).filter(isUnique);
    }
    exports.getUserLocales = (0, mem_1.default)(getUserLocalesInternal, { cacheKey: JSON.stringify });
    function getUserLocaleInternal(options) {
      return (0, exports.getUserLocales)(options)[0] || null;
    }
    exports.getUserLocale = (0, mem_1.default)(getUserLocaleInternal, { cacheKey: JSON.stringify });
    exports.default = exports.getUserLocale;
  }
});

// node_modules/@wojtekmaj/date-utils/dist/cjs/index.js
var require_cjs2 = __commonJS({
  "node_modules/@wojtekmaj/date-utils/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getISOLocalDateTime = exports.getISOLocalDate = exports.getISOLocalMonth = exports.getHoursMinutesSeconds = exports.getHoursMinutes = exports.getDaysInMonth = exports.getDayRange = exports.getNextDayEnd = exports.getPreviousDayEnd = exports.getDayEnd = exports.getNextDayStart = exports.getPreviousDayStart = exports.getDayStart = exports.getMonthRange = exports.getNextMonthEnd = exports.getPreviousMonthEnd = exports.getMonthEnd = exports.getNextMonthStart = exports.getPreviousMonthStart = exports.getMonthStart = exports.getYearRange = exports.getNextYearEnd = exports.getPreviousYearEnd = exports.getYearEnd = exports.getNextYearStart = exports.getPreviousYearStart = exports.getYearStart = exports.getDecadeRange = exports.getNextDecadeEnd = exports.getPreviousDecadeEnd = exports.getDecadeEnd = exports.getNextDecadeStart = exports.getPreviousDecadeStart = exports.getDecadeStart = exports.getCenturyRange = exports.getNextCenturyEnd = exports.getPreviousCenturyEnd = exports.getCenturyEnd = exports.getNextCenturyStart = exports.getPreviousCenturyStart = exports.getCenturyStart = exports.getMilliseconds = exports.getSeconds = exports.getMinutes = exports.getHours = exports.getDate = exports.getMonthHuman = exports.getMonth = exports.getYear = void 0;
    function makeGetEdgeOfNeighbor(getPeriod, getEdgeOfPeriod, defaultOffset) {
      return function makeGetEdgeOfNeighborInternal(date, offset) {
        if (offset === void 0) {
          offset = defaultOffset;
        }
        var previousPeriod = getPeriod(date) + offset;
        return getEdgeOfPeriod(previousPeriod);
      };
    }
    function makeGetEnd(getBeginOfNextPeriod) {
      return function makeGetEndInternal(date) {
        return new Date(getBeginOfNextPeriod(date).getTime() - 1);
      };
    }
    function makeGetRange(getStart, getEnd) {
      return function makeGetRangeInternal(date) {
        return [getStart(date), getEnd(date)];
      };
    }
    function getYear(date) {
      if (date instanceof Date) {
        return date.getFullYear();
      }
      if (typeof date === "number") {
        return date;
      }
      var year = parseInt(date, 10);
      if (typeof date === "string" && !isNaN(year)) {
        return year;
      }
      throw new Error("Failed to get year from date: ".concat(date, "."));
    }
    exports.getYear = getYear;
    function getMonth(date) {
      if (date instanceof Date) {
        return date.getMonth();
      }
      throw new Error("Failed to get month from date: ".concat(date, "."));
    }
    exports.getMonth = getMonth;
    function getMonthHuman(date) {
      if (date instanceof Date) {
        return date.getMonth() + 1;
      }
      throw new Error("Failed to get human-readable month from date: ".concat(date, "."));
    }
    exports.getMonthHuman = getMonthHuman;
    function getDate(date) {
      if (date instanceof Date) {
        return date.getDate();
      }
      throw new Error("Failed to get year from date: ".concat(date, "."));
    }
    exports.getDate = getDate;
    function getHours(date) {
      if (date instanceof Date) {
        return date.getHours();
      }
      if (typeof date === "string") {
        var datePieces = date.split(":");
        if (datePieces.length >= 2) {
          var hoursString = datePieces[0];
          if (hoursString) {
            var hours = parseInt(hoursString, 10);
            if (!isNaN(hours)) {
              return hours;
            }
          }
        }
      }
      throw new Error("Failed to get hours from date: ".concat(date, "."));
    }
    exports.getHours = getHours;
    function getMinutes(date) {
      if (date instanceof Date) {
        return date.getMinutes();
      }
      if (typeof date === "string") {
        var datePieces = date.split(":");
        if (datePieces.length >= 2) {
          var minutesString = datePieces[1] || "0";
          var minutes = parseInt(minutesString, 10);
          if (!isNaN(minutes)) {
            return minutes;
          }
        }
      }
      throw new Error("Failed to get minutes from date: ".concat(date, "."));
    }
    exports.getMinutes = getMinutes;
    function getSeconds(date) {
      if (date instanceof Date) {
        return date.getSeconds();
      }
      if (typeof date === "string") {
        var datePieces = date.split(":");
        if (datePieces.length >= 2) {
          var secondsWithMillisecondsString = datePieces[2] || "0";
          var seconds = parseInt(secondsWithMillisecondsString, 10);
          if (!isNaN(seconds)) {
            return seconds;
          }
        }
      }
      throw new Error("Failed to get seconds from date: ".concat(date, "."));
    }
    exports.getSeconds = getSeconds;
    function getMilliseconds(date) {
      if (date instanceof Date) {
        return date.getMilliseconds();
      }
      if (typeof date === "string") {
        var datePieces = date.split(":");
        if (datePieces.length >= 2) {
          var secondsWithMillisecondsString = datePieces[2] || "0";
          var millisecondsString = secondsWithMillisecondsString.split(".")[1] || "0";
          var milliseconds = parseInt(millisecondsString, 10);
          if (!isNaN(milliseconds)) {
            return milliseconds;
          }
        }
      }
      throw new Error("Failed to get seconds from date: ".concat(date, "."));
    }
    exports.getMilliseconds = getMilliseconds;
    function getCenturyStart(date) {
      var year = getYear(date);
      var centuryStartYear = year + (-year + 1) % 100;
      var centuryStartDate = /* @__PURE__ */ new Date();
      centuryStartDate.setFullYear(centuryStartYear, 0, 1);
      centuryStartDate.setHours(0, 0, 0, 0);
      return centuryStartDate;
    }
    exports.getCenturyStart = getCenturyStart;
    exports.getPreviousCenturyStart = makeGetEdgeOfNeighbor(getYear, getCenturyStart, -100);
    exports.getNextCenturyStart = makeGetEdgeOfNeighbor(getYear, getCenturyStart, 100);
    exports.getCenturyEnd = makeGetEnd(exports.getNextCenturyStart);
    exports.getPreviousCenturyEnd = makeGetEdgeOfNeighbor(getYear, exports.getCenturyEnd, -100);
    exports.getNextCenturyEnd = makeGetEdgeOfNeighbor(getYear, exports.getCenturyEnd, 100);
    exports.getCenturyRange = makeGetRange(getCenturyStart, exports.getCenturyEnd);
    function getDecadeStart(date) {
      var year = getYear(date);
      var decadeStartYear = year + (-year + 1) % 10;
      var decadeStartDate = /* @__PURE__ */ new Date();
      decadeStartDate.setFullYear(decadeStartYear, 0, 1);
      decadeStartDate.setHours(0, 0, 0, 0);
      return decadeStartDate;
    }
    exports.getDecadeStart = getDecadeStart;
    exports.getPreviousDecadeStart = makeGetEdgeOfNeighbor(getYear, getDecadeStart, -10);
    exports.getNextDecadeStart = makeGetEdgeOfNeighbor(getYear, getDecadeStart, 10);
    exports.getDecadeEnd = makeGetEnd(exports.getNextDecadeStart);
    exports.getPreviousDecadeEnd = makeGetEdgeOfNeighbor(getYear, exports.getDecadeEnd, -10);
    exports.getNextDecadeEnd = makeGetEdgeOfNeighbor(getYear, exports.getDecadeEnd, 10);
    exports.getDecadeRange = makeGetRange(getDecadeStart, exports.getDecadeEnd);
    function getYearStart(date) {
      var year = getYear(date);
      var yearStartDate = /* @__PURE__ */ new Date();
      yearStartDate.setFullYear(year, 0, 1);
      yearStartDate.setHours(0, 0, 0, 0);
      return yearStartDate;
    }
    exports.getYearStart = getYearStart;
    exports.getPreviousYearStart = makeGetEdgeOfNeighbor(getYear, getYearStart, -1);
    exports.getNextYearStart = makeGetEdgeOfNeighbor(getYear, getYearStart, 1);
    exports.getYearEnd = makeGetEnd(exports.getNextYearStart);
    exports.getPreviousYearEnd = makeGetEdgeOfNeighbor(getYear, exports.getYearEnd, -1);
    exports.getNextYearEnd = makeGetEdgeOfNeighbor(getYear, exports.getYearEnd, 1);
    exports.getYearRange = makeGetRange(getYearStart, exports.getYearEnd);
    function makeGetEdgeOfNeighborMonth(getEdgeOfPeriod, defaultOffset) {
      return function makeGetEdgeOfNeighborMonthInternal(date, offset) {
        if (offset === void 0) {
          offset = defaultOffset;
        }
        var year = getYear(date);
        var month = getMonth(date) + offset;
        var previousPeriod = /* @__PURE__ */ new Date();
        previousPeriod.setFullYear(year, month, 1);
        previousPeriod.setHours(0, 0, 0, 0);
        return getEdgeOfPeriod(previousPeriod);
      };
    }
    function getMonthStart(date) {
      var year = getYear(date);
      var month = getMonth(date);
      var monthStartDate = /* @__PURE__ */ new Date();
      monthStartDate.setFullYear(year, month, 1);
      monthStartDate.setHours(0, 0, 0, 0);
      return monthStartDate;
    }
    exports.getMonthStart = getMonthStart;
    exports.getPreviousMonthStart = makeGetEdgeOfNeighborMonth(getMonthStart, -1);
    exports.getNextMonthStart = makeGetEdgeOfNeighborMonth(getMonthStart, 1);
    exports.getMonthEnd = makeGetEnd(exports.getNextMonthStart);
    exports.getPreviousMonthEnd = makeGetEdgeOfNeighborMonth(exports.getMonthEnd, -1);
    exports.getNextMonthEnd = makeGetEdgeOfNeighborMonth(exports.getMonthEnd, 1);
    exports.getMonthRange = makeGetRange(getMonthStart, exports.getMonthEnd);
    function makeGetEdgeOfNeighborDay(getEdgeOfPeriod, defaultOffset) {
      return function makeGetEdgeOfNeighborDayInternal(date, offset) {
        if (offset === void 0) {
          offset = defaultOffset;
        }
        var year = getYear(date);
        var month = getMonth(date);
        var day = getDate(date) + offset;
        var previousPeriod = /* @__PURE__ */ new Date();
        previousPeriod.setFullYear(year, month, day);
        previousPeriod.setHours(0, 0, 0, 0);
        return getEdgeOfPeriod(previousPeriod);
      };
    }
    function getDayStart(date) {
      var year = getYear(date);
      var month = getMonth(date);
      var day = getDate(date);
      var dayStartDate = /* @__PURE__ */ new Date();
      dayStartDate.setFullYear(year, month, day);
      dayStartDate.setHours(0, 0, 0, 0);
      return dayStartDate;
    }
    exports.getDayStart = getDayStart;
    exports.getPreviousDayStart = makeGetEdgeOfNeighborDay(getDayStart, -1);
    exports.getNextDayStart = makeGetEdgeOfNeighborDay(getDayStart, 1);
    exports.getDayEnd = makeGetEnd(exports.getNextDayStart);
    exports.getPreviousDayEnd = makeGetEdgeOfNeighborDay(exports.getDayEnd, -1);
    exports.getNextDayEnd = makeGetEdgeOfNeighborDay(exports.getDayEnd, 1);
    exports.getDayRange = makeGetRange(getDayStart, exports.getDayEnd);
    function getDaysInMonth(date) {
      return getDate((0, exports.getMonthEnd)(date));
    }
    exports.getDaysInMonth = getDaysInMonth;
    function padStart(num, val) {
      if (val === void 0) {
        val = 2;
      }
      var numStr = "".concat(num);
      if (numStr.length >= val) {
        return num;
      }
      return "0000".concat(numStr).slice(-val);
    }
    function getHoursMinutes(date) {
      var hours = padStart(getHours(date));
      var minutes = padStart(getMinutes(date));
      return "".concat(hours, ":").concat(minutes);
    }
    exports.getHoursMinutes = getHoursMinutes;
    function getHoursMinutesSeconds(date) {
      var hours = padStart(getHours(date));
      var minutes = padStart(getMinutes(date));
      var seconds = padStart(getSeconds(date));
      return "".concat(hours, ":").concat(minutes, ":").concat(seconds);
    }
    exports.getHoursMinutesSeconds = getHoursMinutesSeconds;
    function getISOLocalMonth(date) {
      var year = padStart(getYear(date), 4);
      var month = padStart(getMonthHuman(date));
      return "".concat(year, "-").concat(month);
    }
    exports.getISOLocalMonth = getISOLocalMonth;
    function getISOLocalDate(date) {
      var year = padStart(getYear(date), 4);
      var month = padStart(getMonthHuman(date));
      var day = padStart(getDate(date));
      return "".concat(year, "-").concat(month, "-").concat(day);
    }
    exports.getISOLocalDate = getISOLocalDate;
    function getISOLocalDateTime(date) {
      return "".concat(getISOLocalDate(date), "T").concat(getHoursMinutesSeconds(date));
    }
    exports.getISOLocalDateTime = getISOLocalDateTime;
  }
});

// node_modules/react-calendar/dist/cjs/shared/const.js
var require_const = __commonJS({
  "node_modules/react-calendar/dist/cjs/shared/const.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WEEKDAYS = exports.CALENDAR_TYPE_LOCALES = exports.CALENDAR_TYPES = void 0;
    exports.CALENDAR_TYPES = {
      GREGORY: "gregory",
      HEBREW: "hebrew",
      ISLAMIC: "islamic",
      ISO_8601: "iso8601"
    };
    exports.CALENDAR_TYPE_LOCALES = {
      gregory: [
        "en-CA",
        "en-US",
        "es-AR",
        "es-BO",
        "es-CL",
        "es-CO",
        "es-CR",
        "es-DO",
        "es-EC",
        "es-GT",
        "es-HN",
        "es-MX",
        "es-NI",
        "es-PA",
        "es-PE",
        "es-PR",
        "es-SV",
        "es-VE",
        "pt-BR"
      ],
      hebrew: ["he", "he-IL"],
      islamic: [
        // ar-LB, ar-MA intentionally missing
        "ar",
        "ar-AE",
        "ar-BH",
        "ar-DZ",
        "ar-EG",
        "ar-IQ",
        "ar-JO",
        "ar-KW",
        "ar-LY",
        "ar-OM",
        "ar-QA",
        "ar-SA",
        "ar-SD",
        "ar-SY",
        "ar-YE",
        "dv",
        "dv-MV",
        "ps",
        "ps-AR"
      ]
    };
    exports.WEEKDAYS = [0, 1, 2, 3, 4, 5, 6];
  }
});

// node_modules/react-calendar/dist/cjs/shared/dateFormatter.js
var require_dateFormatter = __commonJS({
  "node_modules/react-calendar/dist/cjs/shared/dateFormatter.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatYear = exports.formatWeekday = exports.formatShortWeekday = exports.formatMonthYear = exports.formatMonth = exports.formatLongDate = exports.formatDay = exports.formatDate = void 0;
    var get_user_locale_1 = __importDefault(require_cjs());
    var formatterCache = /* @__PURE__ */ new Map();
    function getFormatter(options) {
      return function formatter(locale, date) {
        var localeWithDefault = locale || (0, get_user_locale_1.default)();
        if (!formatterCache.has(localeWithDefault)) {
          formatterCache.set(localeWithDefault, /* @__PURE__ */ new Map());
        }
        var formatterCacheLocale = formatterCache.get(localeWithDefault);
        if (!formatterCacheLocale.has(options)) {
          formatterCacheLocale.set(options, new Intl.DateTimeFormat(localeWithDefault || void 0, options).format);
        }
        return formatterCacheLocale.get(options)(date);
      };
    }
    function toSafeHour(date) {
      var safeDate = new Date(date);
      return new Date(safeDate.setHours(12));
    }
    function getSafeFormatter(options) {
      return function(locale, date) {
        return getFormatter(options)(locale, toSafeHour(date));
      };
    }
    var formatDateOptions = {
      day: "numeric",
      month: "numeric",
      year: "numeric"
    };
    var formatDayOptions = { day: "numeric" };
    var formatLongDateOptions = {
      day: "numeric",
      month: "long",
      year: "numeric"
    };
    var formatMonthOptions = { month: "long" };
    var formatMonthYearOptions = {
      month: "long",
      year: "numeric"
    };
    var formatShortWeekdayOptions = { weekday: "short" };
    var formatWeekdayOptions = { weekday: "long" };
    var formatYearOptions = { year: "numeric" };
    exports.formatDate = getSafeFormatter(formatDateOptions);
    exports.formatDay = getSafeFormatter(formatDayOptions);
    exports.formatLongDate = getSafeFormatter(formatLongDateOptions);
    exports.formatMonth = getSafeFormatter(formatMonthOptions);
    exports.formatMonthYear = getSafeFormatter(formatMonthYearOptions);
    exports.formatShortWeekday = getSafeFormatter(formatShortWeekdayOptions);
    exports.formatWeekday = getSafeFormatter(formatWeekdayOptions);
    exports.formatYear = getSafeFormatter(formatYearOptions);
  }
});

// node_modules/react-calendar/dist/cjs/shared/dates.js
var require_dates = __commonJS({
  "node_modules/react-calendar/dist/cjs/shared/dates.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDayOfWeek = getDayOfWeek;
    exports.getBeginOfCenturyYear = getBeginOfCenturyYear;
    exports.getBeginOfDecadeYear = getBeginOfDecadeYear;
    exports.getBeginOfWeek = getBeginOfWeek;
    exports.getWeekNumber = getWeekNumber;
    exports.getBegin = getBegin;
    exports.getBeginPrevious = getBeginPrevious;
    exports.getBeginNext = getBeginNext;
    exports.getBeginPrevious2 = getBeginPrevious2;
    exports.getBeginNext2 = getBeginNext2;
    exports.getEnd = getEnd;
    exports.getEndPrevious = getEndPrevious;
    exports.getEndPrevious2 = getEndPrevious2;
    exports.getRange = getRange;
    exports.getValueRange = getValueRange;
    exports.getCenturyLabel = getCenturyLabel;
    exports.getDecadeLabel = getDecadeLabel;
    exports.isCurrentDayOfWeek = isCurrentDayOfWeek;
    exports.isWeekend = isWeekend;
    var date_utils_1 = require_cjs2();
    var const_js_1 = require_const();
    var dateFormatter_js_1 = require_dateFormatter();
    var SUNDAY = const_js_1.WEEKDAYS[0];
    var FRIDAY = const_js_1.WEEKDAYS[5];
    var SATURDAY = const_js_1.WEEKDAYS[6];
    function getDayOfWeek(date, calendarType) {
      if (calendarType === void 0) {
        calendarType = const_js_1.CALENDAR_TYPES.ISO_8601;
      }
      var weekday = date.getDay();
      switch (calendarType) {
        case const_js_1.CALENDAR_TYPES.ISO_8601:
          return (weekday + 6) % 7;
        case const_js_1.CALENDAR_TYPES.ISLAMIC:
          return (weekday + 1) % 7;
        case const_js_1.CALENDAR_TYPES.HEBREW:
        case const_js_1.CALENDAR_TYPES.GREGORY:
          return weekday;
        default:
          throw new Error("Unsupported calendar type.");
      }
    }
    function getBeginOfCenturyYear(date) {
      var beginOfCentury = (0, date_utils_1.getCenturyStart)(date);
      return (0, date_utils_1.getYear)(beginOfCentury);
    }
    function getBeginOfDecadeYear(date) {
      var beginOfDecade = (0, date_utils_1.getDecadeStart)(date);
      return (0, date_utils_1.getYear)(beginOfDecade);
    }
    function getBeginOfWeek(date, calendarType) {
      if (calendarType === void 0) {
        calendarType = const_js_1.CALENDAR_TYPES.ISO_8601;
      }
      var year = (0, date_utils_1.getYear)(date);
      var monthIndex = (0, date_utils_1.getMonth)(date);
      var day = date.getDate() - getDayOfWeek(date, calendarType);
      return new Date(year, monthIndex, day);
    }
    function getWeekNumber(date, calendarType) {
      if (calendarType === void 0) {
        calendarType = const_js_1.CALENDAR_TYPES.ISO_8601;
      }
      var calendarTypeForWeekNumber = calendarType === const_js_1.CALENDAR_TYPES.GREGORY ? const_js_1.CALENDAR_TYPES.GREGORY : const_js_1.CALENDAR_TYPES.ISO_8601;
      var beginOfWeek = getBeginOfWeek(date, calendarType);
      var year = (0, date_utils_1.getYear)(date) + 1;
      var dayInWeekOne;
      var beginOfFirstWeek;
      do {
        dayInWeekOne = new Date(year, 0, calendarTypeForWeekNumber === const_js_1.CALENDAR_TYPES.ISO_8601 ? 4 : 1);
        beginOfFirstWeek = getBeginOfWeek(dayInWeekOne, calendarType);
        year -= 1;
      } while (date < beginOfFirstWeek);
      return Math.round((beginOfWeek.getTime() - beginOfFirstWeek.getTime()) / (864e5 * 7)) + 1;
    }
    function getBegin(rangeType, date) {
      switch (rangeType) {
        case "century":
          return (0, date_utils_1.getCenturyStart)(date);
        case "decade":
          return (0, date_utils_1.getDecadeStart)(date);
        case "year":
          return (0, date_utils_1.getYearStart)(date);
        case "month":
          return (0, date_utils_1.getMonthStart)(date);
        case "day":
          return (0, date_utils_1.getDayStart)(date);
        default:
          throw new Error("Invalid rangeType: ".concat(rangeType));
      }
    }
    function getBeginPrevious(rangeType, date) {
      switch (rangeType) {
        case "century":
          return (0, date_utils_1.getPreviousCenturyStart)(date);
        case "decade":
          return (0, date_utils_1.getPreviousDecadeStart)(date);
        case "year":
          return (0, date_utils_1.getPreviousYearStart)(date);
        case "month":
          return (0, date_utils_1.getPreviousMonthStart)(date);
        default:
          throw new Error("Invalid rangeType: ".concat(rangeType));
      }
    }
    function getBeginNext(rangeType, date) {
      switch (rangeType) {
        case "century":
          return (0, date_utils_1.getNextCenturyStart)(date);
        case "decade":
          return (0, date_utils_1.getNextDecadeStart)(date);
        case "year":
          return (0, date_utils_1.getNextYearStart)(date);
        case "month":
          return (0, date_utils_1.getNextMonthStart)(date);
        default:
          throw new Error("Invalid rangeType: ".concat(rangeType));
      }
    }
    function getBeginPrevious2(rangeType, date) {
      switch (rangeType) {
        case "decade":
          return (0, date_utils_1.getPreviousDecadeStart)(date, -100);
        case "year":
          return (0, date_utils_1.getPreviousYearStart)(date, -10);
        case "month":
          return (0, date_utils_1.getPreviousMonthStart)(date, -12);
        default:
          throw new Error("Invalid rangeType: ".concat(rangeType));
      }
    }
    function getBeginNext2(rangeType, date) {
      switch (rangeType) {
        case "decade":
          return (0, date_utils_1.getNextDecadeStart)(date, 100);
        case "year":
          return (0, date_utils_1.getNextYearStart)(date, 10);
        case "month":
          return (0, date_utils_1.getNextMonthStart)(date, 12);
        default:
          throw new Error("Invalid rangeType: ".concat(rangeType));
      }
    }
    function getEnd(rangeType, date) {
      switch (rangeType) {
        case "century":
          return (0, date_utils_1.getCenturyEnd)(date);
        case "decade":
          return (0, date_utils_1.getDecadeEnd)(date);
        case "year":
          return (0, date_utils_1.getYearEnd)(date);
        case "month":
          return (0, date_utils_1.getMonthEnd)(date);
        case "day":
          return (0, date_utils_1.getDayEnd)(date);
        default:
          throw new Error("Invalid rangeType: ".concat(rangeType));
      }
    }
    function getEndPrevious(rangeType, date) {
      switch (rangeType) {
        case "century":
          return (0, date_utils_1.getPreviousCenturyEnd)(date);
        case "decade":
          return (0, date_utils_1.getPreviousDecadeEnd)(date);
        case "year":
          return (0, date_utils_1.getPreviousYearEnd)(date);
        case "month":
          return (0, date_utils_1.getPreviousMonthEnd)(date);
        default:
          throw new Error("Invalid rangeType: ".concat(rangeType));
      }
    }
    function getEndPrevious2(rangeType, date) {
      switch (rangeType) {
        case "decade":
          return (0, date_utils_1.getPreviousDecadeEnd)(date, -100);
        case "year":
          return (0, date_utils_1.getPreviousYearEnd)(date, -10);
        case "month":
          return (0, date_utils_1.getPreviousMonthEnd)(date, -12);
        default:
          throw new Error("Invalid rangeType: ".concat(rangeType));
      }
    }
    function getRange(rangeType, date) {
      switch (rangeType) {
        case "century":
          return (0, date_utils_1.getCenturyRange)(date);
        case "decade":
          return (0, date_utils_1.getDecadeRange)(date);
        case "year":
          return (0, date_utils_1.getYearRange)(date);
        case "month":
          return (0, date_utils_1.getMonthRange)(date);
        case "day":
          return (0, date_utils_1.getDayRange)(date);
        default:
          throw new Error("Invalid rangeType: ".concat(rangeType));
      }
    }
    function getValueRange(rangeType, date1, date2) {
      var rawNextValue = [date1, date2].sort(function(a, b) {
        return a.getTime() - b.getTime();
      });
      return [getBegin(rangeType, rawNextValue[0]), getEnd(rangeType, rawNextValue[1])];
    }
    function toYearLabel(locale, formatYear, dates) {
      return dates.map(function(date) {
        return (formatYear || dateFormatter_js_1.formatYear)(locale, date);
      }).join(" – ");
    }
    function getCenturyLabel(locale, formatYear, date) {
      return toYearLabel(locale, formatYear, (0, date_utils_1.getCenturyRange)(date));
    }
    function getDecadeLabel(locale, formatYear, date) {
      return toYearLabel(locale, formatYear, (0, date_utils_1.getDecadeRange)(date));
    }
    function isCurrentDayOfWeek(date) {
      return date.getDay() === (/* @__PURE__ */ new Date()).getDay();
    }
    function isWeekend(date, calendarType) {
      if (calendarType === void 0) {
        calendarType = const_js_1.CALENDAR_TYPES.ISO_8601;
      }
      var weekday = date.getDay();
      switch (calendarType) {
        case const_js_1.CALENDAR_TYPES.ISLAMIC:
        case const_js_1.CALENDAR_TYPES.HEBREW:
          return weekday === FRIDAY || weekday === SATURDAY;
        case const_js_1.CALENDAR_TYPES.ISO_8601:
        case const_js_1.CALENDAR_TYPES.GREGORY:
          return weekday === SATURDAY || weekday === SUNDAY;
        default:
          throw new Error("Unsupported calendar type.");
      }
    }
  }
});

// node_modules/react-calendar/dist/cjs/Calendar/Navigation.js
var require_Navigation = __commonJS({
  "node_modules/react-calendar/dist/cjs/Calendar/Navigation.js"(exports) {
    "use strict";
    "use client";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Navigation;
    var jsx_runtime_1 = require_jsx_runtime();
    var get_user_locale_1 = require_cjs();
    var dates_js_1 = require_dates();
    var dateFormatter_js_1 = require_dateFormatter();
    var className = "react-calendar__navigation";
    function Navigation(_a) {
      var activeStartDate = _a.activeStartDate, drillUp = _a.drillUp, _b = _a.formatMonthYear, formatMonthYear = _b === void 0 ? dateFormatter_js_1.formatMonthYear : _b, _c = _a.formatYear, formatYear = _c === void 0 ? dateFormatter_js_1.formatYear : _c, locale = _a.locale, maxDate = _a.maxDate, minDate = _a.minDate, _d = _a.navigationAriaLabel, navigationAriaLabel = _d === void 0 ? "" : _d, navigationAriaLive = _a.navigationAriaLive, navigationLabel = _a.navigationLabel, _e = _a.next2AriaLabel, next2AriaLabel = _e === void 0 ? "" : _e, _f = _a.next2Label, next2Label = _f === void 0 ? "»" : _f, _g = _a.nextAriaLabel, nextAriaLabel = _g === void 0 ? "" : _g, _h = _a.nextLabel, nextLabel = _h === void 0 ? "›" : _h, _j = _a.prev2AriaLabel, prev2AriaLabel = _j === void 0 ? "" : _j, _k = _a.prev2Label, prev2Label = _k === void 0 ? "«" : _k, _l = _a.prevAriaLabel, prevAriaLabel = _l === void 0 ? "" : _l, _m = _a.prevLabel, prevLabel = _m === void 0 ? "‹" : _m, setActiveStartDate = _a.setActiveStartDate, showDoubleView = _a.showDoubleView, view = _a.view, views = _a.views;
      var drillUpAvailable = views.indexOf(view) > 0;
      var shouldShowPrevNext2Buttons = view !== "century";
      var previousActiveStartDate = (0, dates_js_1.getBeginPrevious)(view, activeStartDate);
      var previousActiveStartDate2 = shouldShowPrevNext2Buttons ? (0, dates_js_1.getBeginPrevious2)(view, activeStartDate) : void 0;
      var nextActiveStartDate = (0, dates_js_1.getBeginNext)(view, activeStartDate);
      var nextActiveStartDate2 = shouldShowPrevNext2Buttons ? (0, dates_js_1.getBeginNext2)(view, activeStartDate) : void 0;
      var prevButtonDisabled = function() {
        if (previousActiveStartDate.getFullYear() < 0) {
          return true;
        }
        var previousActiveEndDate = (0, dates_js_1.getEndPrevious)(view, activeStartDate);
        return minDate && minDate >= previousActiveEndDate;
      }();
      var prev2ButtonDisabled = shouldShowPrevNext2Buttons && function() {
        if (previousActiveStartDate2.getFullYear() < 0) {
          return true;
        }
        var previousActiveEndDate = (0, dates_js_1.getEndPrevious2)(view, activeStartDate);
        return minDate && minDate >= previousActiveEndDate;
      }();
      var nextButtonDisabled = maxDate && maxDate < nextActiveStartDate;
      var next2ButtonDisabled = shouldShowPrevNext2Buttons && maxDate && maxDate < nextActiveStartDate2;
      function onClickPrevious() {
        setActiveStartDate(previousActiveStartDate, "prev");
      }
      function onClickPrevious2() {
        setActiveStartDate(previousActiveStartDate2, "prev2");
      }
      function onClickNext() {
        setActiveStartDate(nextActiveStartDate, "next");
      }
      function onClickNext2() {
        setActiveStartDate(nextActiveStartDate2, "next2");
      }
      function renderLabel(date) {
        var label = function() {
          switch (view) {
            case "century":
              return (0, dates_js_1.getCenturyLabel)(locale, formatYear, date);
            case "decade":
              return (0, dates_js_1.getDecadeLabel)(locale, formatYear, date);
            case "year":
              return formatYear(locale, date);
            case "month":
              return formatMonthYear(locale, date);
            default:
              throw new Error("Invalid view: ".concat(view, "."));
          }
        }();
        return navigationLabel ? navigationLabel({
          date,
          label,
          locale: locale || (0, get_user_locale_1.getUserLocale)() || void 0,
          view
        }) : label;
      }
      function renderButton() {
        var labelClassName = "".concat(className, "__label");
        return (0, jsx_runtime_1.jsxs)("button", { "aria-label": navigationAriaLabel, "aria-live": navigationAriaLive, className: labelClassName, disabled: !drillUpAvailable, onClick: drillUp, style: { flexGrow: 1 }, type: "button", children: [(0, jsx_runtime_1.jsx)("span", { className: "".concat(labelClassName, "__labelText ").concat(labelClassName, "__labelText--from"), children: renderLabel(activeStartDate) }), showDoubleView ? (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("span", { className: "".concat(labelClassName, "__divider"), children: " – " }), (0, jsx_runtime_1.jsx)("span", { className: "".concat(labelClassName, "__labelText ").concat(labelClassName, "__labelText--to"), children: renderLabel(nextActiveStartDate) })] }) : null] });
      }
      return (0, jsx_runtime_1.jsxs)("div", { className, children: [prev2Label !== null && shouldShowPrevNext2Buttons ? (0, jsx_runtime_1.jsx)("button", { "aria-label": prev2AriaLabel, className: "".concat(className, "__arrow ").concat(className, "__prev2-button"), disabled: prev2ButtonDisabled, onClick: onClickPrevious2, type: "button", children: prev2Label }) : null, prevLabel !== null && (0, jsx_runtime_1.jsx)("button", { "aria-label": prevAriaLabel, className: "".concat(className, "__arrow ").concat(className, "__prev-button"), disabled: prevButtonDisabled, onClick: onClickPrevious, type: "button", children: prevLabel }), renderButton(), nextLabel !== null && (0, jsx_runtime_1.jsx)("button", { "aria-label": nextAriaLabel, className: "".concat(className, "__arrow ").concat(className, "__next-button"), disabled: nextButtonDisabled, onClick: onClickNext, type: "button", children: nextLabel }), next2Label !== null && shouldShowPrevNext2Buttons ? (0, jsx_runtime_1.jsx)("button", { "aria-label": next2AriaLabel, className: "".concat(className, "__arrow ").concat(className, "__next2-button"), disabled: next2ButtonDisabled, onClick: onClickNext2, type: "button", children: next2Label }) : null] });
    }
  }
});

// node_modules/react-calendar/dist/cjs/Flex.js
var require_Flex = __commonJS({
  "node_modules/react-calendar/dist/cjs/Flex.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __rest = exports && exports.__rest || function(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Flex;
    var jsx_runtime_1 = require_jsx_runtime();
    var react_1 = require_react();
    function toPercent(num) {
      return "".concat(num, "%");
    }
    function Flex(_a) {
      var children = _a.children, className = _a.className, count = _a.count, direction = _a.direction, offset = _a.offset, style = _a.style, wrap = _a.wrap, otherProps = __rest(_a, ["children", "className", "count", "direction", "offset", "style", "wrap"]);
      return (0, jsx_runtime_1.jsx)("div", __assign({ className, style: __assign({ display: "flex", flexDirection: direction, flexWrap: wrap ? "wrap" : "nowrap" }, style) }, otherProps, { children: react_1.Children.map(children, function(child, index) {
        var marginInlineStart = offset && index === 0 ? toPercent(100 * offset / count) : null;
        return (0, react_1.cloneElement)(child, __assign(__assign({}, child.props), { style: {
          flexBasis: toPercent(100 / count),
          flexShrink: 0,
          flexGrow: 0,
          overflow: "hidden",
          marginLeft: marginInlineStart,
          marginInlineStart,
          marginInlineEnd: 0
        } }));
      }) }));
    }
  }
});

// node_modules/react-calendar/dist/cjs/shared/utils.js
var require_utils = __commonJS({
  "node_modules/react-calendar/dist/cjs/shared/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.between = between;
    exports.isValueWithinRange = isValueWithinRange;
    exports.isRangeWithinRange = isRangeWithinRange;
    exports.doRangesOverlap = doRangesOverlap;
    exports.getTileClasses = getTileClasses;
    var dates_js_1 = require_dates();
    function between(value, min, max) {
      if (min && min > value) {
        return min;
      }
      if (max && max < value) {
        return max;
      }
      return value;
    }
    function isValueWithinRange(value, range) {
      return range[0] <= value && range[1] >= value;
    }
    function isRangeWithinRange(greaterRange, smallerRange) {
      return greaterRange[0] <= smallerRange[0] && greaterRange[1] >= smallerRange[1];
    }
    function doRangesOverlap(range1, range2) {
      return isValueWithinRange(range1[0], range2) || isValueWithinRange(range1[1], range2);
    }
    function getRangeClassNames(valueRange, dateRange, baseClassName) {
      var isRange = doRangesOverlap(dateRange, valueRange);
      var classes = [];
      if (isRange) {
        classes.push(baseClassName);
        var isRangeStart = isValueWithinRange(valueRange[0], dateRange);
        var isRangeEnd = isValueWithinRange(valueRange[1], dateRange);
        if (isRangeStart) {
          classes.push("".concat(baseClassName, "Start"));
        }
        if (isRangeEnd) {
          classes.push("".concat(baseClassName, "End"));
        }
        if (isRangeStart && isRangeEnd) {
          classes.push("".concat(baseClassName, "BothEnds"));
        }
      }
      return classes;
    }
    function isCompleteValue(value) {
      if (Array.isArray(value)) {
        return value[0] !== null && value[1] !== null;
      }
      return value !== null;
    }
    function getTileClasses(args) {
      if (!args) {
        throw new Error("args is required");
      }
      var value = args.value, date = args.date, hover = args.hover;
      var className = "react-calendar__tile";
      var classes = [className];
      if (!date) {
        return classes;
      }
      var now = /* @__PURE__ */ new Date();
      var dateRange = function() {
        if (Array.isArray(date)) {
          return date;
        }
        var dateType = args.dateType;
        if (!dateType) {
          throw new Error("dateType is required when date is not an array of two dates");
        }
        return (0, dates_js_1.getRange)(dateType, date);
      }();
      if (isValueWithinRange(now, dateRange)) {
        classes.push("".concat(className, "--now"));
      }
      if (!value || !isCompleteValue(value)) {
        return classes;
      }
      var valueRange = function() {
        if (Array.isArray(value)) {
          return value;
        }
        var valueType = args.valueType;
        if (!valueType) {
          throw new Error("valueType is required when value is not an array of two dates");
        }
        return (0, dates_js_1.getRange)(valueType, value);
      }();
      if (isRangeWithinRange(valueRange, dateRange)) {
        classes.push("".concat(className, "--active"));
      } else if (doRangesOverlap(valueRange, dateRange)) {
        classes.push("".concat(className, "--hasActive"));
      }
      var valueRangeClassNames = getRangeClassNames(valueRange, dateRange, "".concat(className, "--range"));
      classes.push.apply(classes, valueRangeClassNames);
      var valueArray = Array.isArray(value) ? value : [value];
      if (hover && valueArray.length === 1) {
        var hoverRange = hover > valueRange[0] ? [valueRange[0], hover] : [hover, valueRange[0]];
        var hoverRangeClassNames = getRangeClassNames(hoverRange, dateRange, "".concat(className, "--hover"));
        classes.push.apply(classes, hoverRangeClassNames);
      }
      return classes;
    }
  }
});

// node_modules/react-calendar/dist/cjs/TileGroup.js
var require_TileGroup = __commonJS({
  "node_modules/react-calendar/dist/cjs/TileGroup.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = TileGroup;
    var jsx_runtime_1 = require_jsx_runtime();
    var Flex_js_1 = __importDefault(require_Flex());
    var utils_js_1 = require_utils();
    function TileGroup(_a) {
      var className = _a.className, _b = _a.count, count = _b === void 0 ? 3 : _b, dateTransform = _a.dateTransform, dateType = _a.dateType, end = _a.end, hover = _a.hover, offset = _a.offset, renderTile = _a.renderTile, start = _a.start, _c = _a.step, step = _c === void 0 ? 1 : _c, value = _a.value, valueType = _a.valueType;
      var tiles = [];
      for (var point = start; point <= end; point += step) {
        var date = dateTransform(point);
        tiles.push(renderTile({
          classes: (0, utils_js_1.getTileClasses)({
            date,
            dateType,
            hover,
            value,
            valueType
          }),
          date
        }));
      }
      return (0, jsx_runtime_1.jsx)(Flex_js_1.default, { className, count, offset, wrap: true, children: tiles });
    }
  }
});

// node_modules/react-calendar/dist/cjs/Tile.js
var require_Tile = __commonJS({
  "node_modules/react-calendar/dist/cjs/Tile.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Tile;
    var jsx_runtime_1 = require_jsx_runtime();
    var react_1 = require_react();
    var clsx_1 = __importDefault(require_clsx());
    function Tile(props) {
      var activeStartDate = props.activeStartDate, children = props.children, classes = props.classes, date = props.date, formatAbbr = props.formatAbbr, locale = props.locale, maxDate = props.maxDate, maxDateTransform = props.maxDateTransform, minDate = props.minDate, minDateTransform = props.minDateTransform, onClick = props.onClick, onMouseOver = props.onMouseOver, style = props.style, tileClassNameProps = props.tileClassName, tileContentProps = props.tileContent, tileDisabled = props.tileDisabled, view = props.view;
      var tileClassName = (0, react_1.useMemo)(function() {
        var args = { activeStartDate, date, view };
        return typeof tileClassNameProps === "function" ? tileClassNameProps(args) : tileClassNameProps;
      }, [activeStartDate, date, tileClassNameProps, view]);
      var tileContent = (0, react_1.useMemo)(function() {
        var args = { activeStartDate, date, view };
        return typeof tileContentProps === "function" ? tileContentProps(args) : tileContentProps;
      }, [activeStartDate, date, tileContentProps, view]);
      return (0, jsx_runtime_1.jsxs)("button", { className: (0, clsx_1.default)(classes, tileClassName), disabled: minDate && minDateTransform(minDate) > date || maxDate && maxDateTransform(maxDate) < date || (tileDisabled === null || tileDisabled === void 0 ? void 0 : tileDisabled({ activeStartDate, date, view })), onClick: onClick ? function(event) {
        return onClick(date, event);
      } : void 0, onFocus: onMouseOver ? function() {
        return onMouseOver(date);
      } : void 0, onMouseOver: onMouseOver ? function() {
        return onMouseOver(date);
      } : void 0, style, type: "button", children: [formatAbbr ? (0, jsx_runtime_1.jsx)("abbr", { "aria-label": formatAbbr(locale, date), children }) : children, tileContent] });
    }
  }
});

// node_modules/react-calendar/dist/cjs/CenturyView/Decade.js
var require_Decade = __commonJS({
  "node_modules/react-calendar/dist/cjs/CenturyView/Decade.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __rest = exports && exports.__rest || function(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Decade;
    var jsx_runtime_1 = require_jsx_runtime();
    var date_utils_1 = require_cjs2();
    var Tile_js_1 = __importDefault(require_Tile());
    var dates_js_1 = require_dates();
    var dateFormatter_js_1 = require_dateFormatter();
    var className = "react-calendar__century-view__decades__decade";
    function Decade(_a) {
      var _b = _a.classes, classes = _b === void 0 ? [] : _b, currentCentury = _a.currentCentury, _c = _a.formatYear, formatYear = _c === void 0 ? dateFormatter_js_1.formatYear : _c, otherProps = __rest(_a, ["classes", "currentCentury", "formatYear"]);
      var date = otherProps.date, locale = otherProps.locale;
      var classesProps = [];
      if (classes) {
        classesProps.push.apply(classesProps, classes);
      }
      if (className) {
        classesProps.push(className);
      }
      if ((0, date_utils_1.getCenturyStart)(date).getFullYear() !== currentCentury) {
        classesProps.push("".concat(className, "--neighboringCentury"));
      }
      return (0, jsx_runtime_1.jsx)(Tile_js_1.default, __assign({}, otherProps, { classes: classesProps, maxDateTransform: date_utils_1.getDecadeEnd, minDateTransform: date_utils_1.getDecadeStart, view: "century", children: (0, dates_js_1.getDecadeLabel)(locale, formatYear, date) }));
    }
  }
});

// node_modules/react-calendar/dist/cjs/CenturyView/Decades.js
var require_Decades = __commonJS({
  "node_modules/react-calendar/dist/cjs/CenturyView/Decades.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __rest = exports && exports.__rest || function(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Decades;
    var jsx_runtime_1 = require_jsx_runtime();
    var date_utils_1 = require_cjs2();
    var TileGroup_js_1 = __importDefault(require_TileGroup());
    var Decade_js_1 = __importDefault(require_Decade());
    var dates_js_1 = require_dates();
    function Decades(props) {
      var activeStartDate = props.activeStartDate, hover = props.hover, showNeighboringCentury = props.showNeighboringCentury, value = props.value, valueType = props.valueType, otherProps = __rest(props, ["activeStartDate", "hover", "showNeighboringCentury", "value", "valueType"]);
      var start = (0, dates_js_1.getBeginOfCenturyYear)(activeStartDate);
      var end = start + (showNeighboringCentury ? 119 : 99);
      return (0, jsx_runtime_1.jsx)(TileGroup_js_1.default, { className: "react-calendar__century-view__decades", dateTransform: date_utils_1.getDecadeStart, dateType: "decade", end, hover, renderTile: function(_a) {
        var date = _a.date, otherTileProps = __rest(_a, ["date"]);
        return (0, jsx_runtime_1.jsx)(Decade_js_1.default, __assign({}, otherProps, otherTileProps, { activeStartDate, currentCentury: start, date }), date.getTime());
      }, start, step: 10, value, valueType });
    }
  }
});

// node_modules/react-calendar/dist/cjs/CenturyView.js
var require_CenturyView = __commonJS({
  "node_modules/react-calendar/dist/cjs/CenturyView.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = CenturyView;
    var jsx_runtime_1 = require_jsx_runtime();
    var Decades_js_1 = __importDefault(require_Decades());
    function CenturyView(props) {
      function renderDecades() {
        return (0, jsx_runtime_1.jsx)(Decades_js_1.default, __assign({}, props));
      }
      return (0, jsx_runtime_1.jsx)("div", { className: "react-calendar__century-view", children: renderDecades() });
    }
  }
});

// node_modules/react-calendar/dist/cjs/DecadeView/Year.js
var require_Year = __commonJS({
  "node_modules/react-calendar/dist/cjs/DecadeView/Year.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __rest = exports && exports.__rest || function(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Year;
    var jsx_runtime_1 = require_jsx_runtime();
    var date_utils_1 = require_cjs2();
    var Tile_js_1 = __importDefault(require_Tile());
    var dateFormatter_js_1 = require_dateFormatter();
    var className = "react-calendar__decade-view__years__year";
    function Year(_a) {
      var _b = _a.classes, classes = _b === void 0 ? [] : _b, currentDecade = _a.currentDecade, _c = _a.formatYear, formatYear = _c === void 0 ? dateFormatter_js_1.formatYear : _c, otherProps = __rest(_a, ["classes", "currentDecade", "formatYear"]);
      var date = otherProps.date, locale = otherProps.locale;
      var classesProps = [];
      if (classes) {
        classesProps.push.apply(classesProps, classes);
      }
      if (className) {
        classesProps.push(className);
      }
      if ((0, date_utils_1.getDecadeStart)(date).getFullYear() !== currentDecade) {
        classesProps.push("".concat(className, "--neighboringDecade"));
      }
      return (0, jsx_runtime_1.jsx)(Tile_js_1.default, __assign({}, otherProps, { classes: classesProps, maxDateTransform: date_utils_1.getYearEnd, minDateTransform: date_utils_1.getYearStart, view: "decade", children: formatYear(locale, date) }));
    }
  }
});

// node_modules/react-calendar/dist/cjs/DecadeView/Years.js
var require_Years = __commonJS({
  "node_modules/react-calendar/dist/cjs/DecadeView/Years.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __rest = exports && exports.__rest || function(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Years;
    var jsx_runtime_1 = require_jsx_runtime();
    var date_utils_1 = require_cjs2();
    var TileGroup_js_1 = __importDefault(require_TileGroup());
    var Year_js_1 = __importDefault(require_Year());
    var dates_js_1 = require_dates();
    function Years(props) {
      var activeStartDate = props.activeStartDate, hover = props.hover, showNeighboringDecade = props.showNeighboringDecade, value = props.value, valueType = props.valueType, otherProps = __rest(props, ["activeStartDate", "hover", "showNeighboringDecade", "value", "valueType"]);
      var start = (0, dates_js_1.getBeginOfDecadeYear)(activeStartDate);
      var end = start + (showNeighboringDecade ? 11 : 9);
      return (0, jsx_runtime_1.jsx)(TileGroup_js_1.default, { className: "react-calendar__decade-view__years", dateTransform: date_utils_1.getYearStart, dateType: "year", end, hover, renderTile: function(_a) {
        var date = _a.date, otherTileProps = __rest(_a, ["date"]);
        return (0, jsx_runtime_1.jsx)(Year_js_1.default, __assign({}, otherProps, otherTileProps, { activeStartDate, currentDecade: start, date }), date.getTime());
      }, start, value, valueType });
    }
  }
});

// node_modules/react-calendar/dist/cjs/DecadeView.js
var require_DecadeView = __commonJS({
  "node_modules/react-calendar/dist/cjs/DecadeView.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = DecadeView;
    var jsx_runtime_1 = require_jsx_runtime();
    var Years_js_1 = __importDefault(require_Years());
    function DecadeView(props) {
      function renderYears() {
        return (0, jsx_runtime_1.jsx)(Years_js_1.default, __assign({}, props));
      }
      return (0, jsx_runtime_1.jsx)("div", { className: "react-calendar__decade-view", children: renderYears() });
    }
  }
});

// node_modules/react-calendar/dist/cjs/YearView/Month.js
var require_Month = __commonJS({
  "node_modules/react-calendar/dist/cjs/YearView/Month.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __rest = exports && exports.__rest || function(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Month;
    var jsx_runtime_1 = require_jsx_runtime();
    var date_utils_1 = require_cjs2();
    var Tile_js_1 = __importDefault(require_Tile());
    var dateFormatter_js_1 = require_dateFormatter();
    var className = "react-calendar__year-view__months__month";
    function Month(_a) {
      var _b = _a.classes, classes = _b === void 0 ? [] : _b, _c = _a.formatMonth, formatMonth = _c === void 0 ? dateFormatter_js_1.formatMonth : _c, _d = _a.formatMonthYear, formatMonthYear = _d === void 0 ? dateFormatter_js_1.formatMonthYear : _d, otherProps = __rest(_a, ["classes", "formatMonth", "formatMonthYear"]);
      var date = otherProps.date, locale = otherProps.locale;
      return (0, jsx_runtime_1.jsx)(Tile_js_1.default, __assign({}, otherProps, { classes: __spreadArray(__spreadArray([], classes, true), [className], false), formatAbbr: formatMonthYear, maxDateTransform: date_utils_1.getMonthEnd, minDateTransform: date_utils_1.getMonthStart, view: "year", children: formatMonth(locale, date) }));
    }
  }
});

// node_modules/react-calendar/dist/cjs/YearView/Months.js
var require_Months = __commonJS({
  "node_modules/react-calendar/dist/cjs/YearView/Months.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __rest = exports && exports.__rest || function(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Months;
    var jsx_runtime_1 = require_jsx_runtime();
    var date_utils_1 = require_cjs2();
    var TileGroup_js_1 = __importDefault(require_TileGroup());
    var Month_js_1 = __importDefault(require_Month());
    function Months(props) {
      var activeStartDate = props.activeStartDate, hover = props.hover, value = props.value, valueType = props.valueType, otherProps = __rest(props, ["activeStartDate", "hover", "value", "valueType"]);
      var start = 0;
      var end = 11;
      var year = (0, date_utils_1.getYear)(activeStartDate);
      return (0, jsx_runtime_1.jsx)(TileGroup_js_1.default, { className: "react-calendar__year-view__months", dateTransform: function(monthIndex) {
        var date = /* @__PURE__ */ new Date();
        date.setFullYear(year, monthIndex, 1);
        return (0, date_utils_1.getMonthStart)(date);
      }, dateType: "month", end, hover, renderTile: function(_a) {
        var date = _a.date, otherTileProps = __rest(_a, ["date"]);
        return (0, jsx_runtime_1.jsx)(Month_js_1.default, __assign({}, otherProps, otherTileProps, { activeStartDate, date }), date.getTime());
      }, start, value, valueType });
    }
  }
});

// node_modules/react-calendar/dist/cjs/YearView.js
var require_YearView = __commonJS({
  "node_modules/react-calendar/dist/cjs/YearView.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = YearView;
    var jsx_runtime_1 = require_jsx_runtime();
    var Months_js_1 = __importDefault(require_Months());
    function YearView(props) {
      function renderMonths() {
        return (0, jsx_runtime_1.jsx)(Months_js_1.default, __assign({}, props));
      }
      return (0, jsx_runtime_1.jsx)("div", { className: "react-calendar__year-view", children: renderMonths() });
    }
  }
});

// node_modules/react-calendar/dist/cjs/MonthView/Day.js
var require_Day = __commonJS({
  "node_modules/react-calendar/dist/cjs/MonthView/Day.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __rest = exports && exports.__rest || function(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Day;
    var jsx_runtime_1 = require_jsx_runtime();
    var date_utils_1 = require_cjs2();
    var Tile_js_1 = __importDefault(require_Tile());
    var dates_js_1 = require_dates();
    var dateFormatter_js_1 = require_dateFormatter();
    var className = "react-calendar__month-view__days__day";
    function Day(_a) {
      var calendarType = _a.calendarType, _b = _a.classes, classes = _b === void 0 ? [] : _b, currentMonthIndex = _a.currentMonthIndex, _c = _a.formatDay, formatDay = _c === void 0 ? dateFormatter_js_1.formatDay : _c, _d = _a.formatLongDate, formatLongDate = _d === void 0 ? dateFormatter_js_1.formatLongDate : _d, otherProps = __rest(_a, ["calendarType", "classes", "currentMonthIndex", "formatDay", "formatLongDate"]);
      var date = otherProps.date, locale = otherProps.locale;
      var classesProps = [];
      if (classes) {
        classesProps.push.apply(classesProps, classes);
      }
      if (className) {
        classesProps.push(className);
      }
      if ((0, dates_js_1.isWeekend)(date, calendarType)) {
        classesProps.push("".concat(className, "--weekend"));
      }
      if (date.getMonth() !== currentMonthIndex) {
        classesProps.push("".concat(className, "--neighboringMonth"));
      }
      return (0, jsx_runtime_1.jsx)(Tile_js_1.default, __assign({}, otherProps, { classes: classesProps, formatAbbr: formatLongDate, maxDateTransform: date_utils_1.getDayEnd, minDateTransform: date_utils_1.getDayStart, view: "month", children: formatDay(locale, date) }));
    }
  }
});

// node_modules/react-calendar/dist/cjs/MonthView/Days.js
var require_Days = __commonJS({
  "node_modules/react-calendar/dist/cjs/MonthView/Days.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __rest = exports && exports.__rest || function(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Days;
    var jsx_runtime_1 = require_jsx_runtime();
    var date_utils_1 = require_cjs2();
    var TileGroup_js_1 = __importDefault(require_TileGroup());
    var Day_js_1 = __importDefault(require_Day());
    var dates_js_1 = require_dates();
    function Days(props) {
      var activeStartDate = props.activeStartDate, calendarType = props.calendarType, hover = props.hover, showFixedNumberOfWeeks = props.showFixedNumberOfWeeks, showNeighboringMonth = props.showNeighboringMonth, value = props.value, valueType = props.valueType, otherProps = __rest(props, ["activeStartDate", "calendarType", "hover", "showFixedNumberOfWeeks", "showNeighboringMonth", "value", "valueType"]);
      var year = (0, date_utils_1.getYear)(activeStartDate);
      var monthIndex = (0, date_utils_1.getMonth)(activeStartDate);
      var hasFixedNumberOfWeeks = showFixedNumberOfWeeks || showNeighboringMonth;
      var dayOfWeek = (0, dates_js_1.getDayOfWeek)(activeStartDate, calendarType);
      var offset = hasFixedNumberOfWeeks ? 0 : dayOfWeek;
      var start = (hasFixedNumberOfWeeks ? -dayOfWeek : 0) + 1;
      var end = function() {
        if (showFixedNumberOfWeeks) {
          return start + 6 * 7 - 1;
        }
        var daysInMonth = (0, date_utils_1.getDaysInMonth)(activeStartDate);
        if (showNeighboringMonth) {
          var activeEndDate = /* @__PURE__ */ new Date();
          activeEndDate.setFullYear(year, monthIndex, daysInMonth);
          activeEndDate.setHours(0, 0, 0, 0);
          var daysUntilEndOfTheWeek = 7 - (0, dates_js_1.getDayOfWeek)(activeEndDate, calendarType) - 1;
          return daysInMonth + daysUntilEndOfTheWeek;
        }
        return daysInMonth;
      }();
      return (0, jsx_runtime_1.jsx)(TileGroup_js_1.default, { className: "react-calendar__month-view__days", count: 7, dateTransform: function(day) {
        var date = /* @__PURE__ */ new Date();
        date.setFullYear(year, monthIndex, day);
        return (0, date_utils_1.getDayStart)(date);
      }, dateType: "day", hover, end, renderTile: function(_a) {
        var date = _a.date, otherTileProps = __rest(_a, ["date"]);
        return (0, jsx_runtime_1.jsx)(Day_js_1.default, __assign({}, otherProps, otherTileProps, { activeStartDate, calendarType, currentMonthIndex: monthIndex, date }), date.getTime());
      }, offset, start, value, valueType });
    }
  }
});

// node_modules/react-calendar/dist/cjs/MonthView/Weekdays.js
var require_Weekdays = __commonJS({
  "node_modules/react-calendar/dist/cjs/MonthView/Weekdays.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Weekdays;
    var jsx_runtime_1 = require_jsx_runtime();
    var clsx_1 = __importDefault(require_clsx());
    var date_utils_1 = require_cjs2();
    var Flex_js_1 = __importDefault(require_Flex());
    var dates_js_1 = require_dates();
    var dateFormatter_js_1 = require_dateFormatter();
    var className = "react-calendar__month-view__weekdays";
    var weekdayClassName = "".concat(className, "__weekday");
    function Weekdays(props) {
      var calendarType = props.calendarType, _a = props.formatShortWeekday, formatShortWeekday = _a === void 0 ? dateFormatter_js_1.formatShortWeekday : _a, _b = props.formatWeekday, formatWeekday = _b === void 0 ? dateFormatter_js_1.formatWeekday : _b, locale = props.locale, onMouseLeave = props.onMouseLeave;
      var anyDate = /* @__PURE__ */ new Date();
      var beginOfMonth = (0, date_utils_1.getMonthStart)(anyDate);
      var year = (0, date_utils_1.getYear)(beginOfMonth);
      var monthIndex = (0, date_utils_1.getMonth)(beginOfMonth);
      var weekdays = [];
      for (var weekday = 1; weekday <= 7; weekday += 1) {
        var weekdayDate = new Date(year, monthIndex, weekday - (0, dates_js_1.getDayOfWeek)(beginOfMonth, calendarType));
        var abbr = formatWeekday(locale, weekdayDate);
        weekdays.push((0, jsx_runtime_1.jsx)("div", { className: (0, clsx_1.default)(weekdayClassName, (0, dates_js_1.isCurrentDayOfWeek)(weekdayDate) && "".concat(weekdayClassName, "--current"), (0, dates_js_1.isWeekend)(weekdayDate, calendarType) && "".concat(weekdayClassName, "--weekend")), children: (0, jsx_runtime_1.jsx)("abbr", { "aria-label": abbr, title: abbr, children: formatShortWeekday(locale, weekdayDate).replace(".", "") }) }, weekday));
      }
      return (0, jsx_runtime_1.jsx)(Flex_js_1.default, { className, count: 7, onFocus: onMouseLeave, onMouseOver: onMouseLeave, children: weekdays });
    }
  }
});

// node_modules/react-calendar/dist/cjs/MonthView/WeekNumber.js
var require_WeekNumber = __commonJS({
  "node_modules/react-calendar/dist/cjs/MonthView/WeekNumber.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __rest = exports && exports.__rest || function(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = WeekNumber;
    var jsx_runtime_1 = require_jsx_runtime();
    var className = "react-calendar__tile";
    function WeekNumber(props) {
      var onClickWeekNumber = props.onClickWeekNumber, weekNumber = props.weekNumber;
      var children = (0, jsx_runtime_1.jsx)("span", { children: weekNumber });
      if (onClickWeekNumber) {
        var date_1 = props.date, onClickWeekNumber_1 = props.onClickWeekNumber, weekNumber_1 = props.weekNumber, otherProps = __rest(props, ["date", "onClickWeekNumber", "weekNumber"]);
        return (0, jsx_runtime_1.jsx)("button", __assign({}, otherProps, { className, onClick: function(event) {
          return onClickWeekNumber_1(weekNumber_1, date_1, event);
        }, type: "button", children }));
      } else {
        var date = props.date, onClickWeekNumber_2 = props.onClickWeekNumber, weekNumber_2 = props.weekNumber, otherProps = __rest(props, ["date", "onClickWeekNumber", "weekNumber"]);
        return (0, jsx_runtime_1.jsx)("div", __assign({}, otherProps, { className, children }));
      }
    }
  }
});

// node_modules/react-calendar/dist/cjs/MonthView/WeekNumbers.js
var require_WeekNumbers = __commonJS({
  "node_modules/react-calendar/dist/cjs/MonthView/WeekNumbers.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = WeekNumbers;
    var jsx_runtime_1 = require_jsx_runtime();
    var date_utils_1 = require_cjs2();
    var WeekNumber_js_1 = __importDefault(require_WeekNumber());
    var Flex_js_1 = __importDefault(require_Flex());
    var dates_js_1 = require_dates();
    function WeekNumbers(props) {
      var activeStartDate = props.activeStartDate, calendarType = props.calendarType, onClickWeekNumber = props.onClickWeekNumber, onMouseLeave = props.onMouseLeave, showFixedNumberOfWeeks = props.showFixedNumberOfWeeks;
      var numberOfWeeks = function() {
        if (showFixedNumberOfWeeks) {
          return 6;
        }
        var numberOfDays = (0, date_utils_1.getDaysInMonth)(activeStartDate);
        var startWeekday = (0, dates_js_1.getDayOfWeek)(activeStartDate, calendarType);
        var days = numberOfDays - (7 - startWeekday);
        return 1 + Math.ceil(days / 7);
      }();
      var dates = function() {
        var year = (0, date_utils_1.getYear)(activeStartDate);
        var monthIndex = (0, date_utils_1.getMonth)(activeStartDate);
        var day = (0, date_utils_1.getDate)(activeStartDate);
        var result = [];
        for (var index = 0; index < numberOfWeeks; index += 1) {
          result.push((0, dates_js_1.getBeginOfWeek)(new Date(year, monthIndex, day + index * 7), calendarType));
        }
        return result;
      }();
      var weekNumbers = dates.map(function(date) {
        return (0, dates_js_1.getWeekNumber)(date, calendarType);
      });
      return (0, jsx_runtime_1.jsx)(Flex_js_1.default, { className: "react-calendar__month-view__weekNumbers", count: numberOfWeeks, direction: "column", onFocus: onMouseLeave, onMouseOver: onMouseLeave, style: { flexBasis: "calc(100% * (1 / 8)", flexShrink: 0 }, children: weekNumbers.map(function(weekNumber, weekIndex) {
        var date = dates[weekIndex];
        if (!date) {
          throw new Error("date is not defined");
        }
        return (0, jsx_runtime_1.jsx)(WeekNumber_js_1.default, { date, onClickWeekNumber, weekNumber }, weekNumber);
      }) });
    }
  }
});

// node_modules/react-calendar/dist/cjs/MonthView.js
var require_MonthView = __commonJS({
  "node_modules/react-calendar/dist/cjs/MonthView.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __rest = exports && exports.__rest || function(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = MonthView;
    var jsx_runtime_1 = require_jsx_runtime();
    var clsx_1 = __importDefault(require_clsx());
    var Days_js_1 = __importDefault(require_Days());
    var Weekdays_js_1 = __importDefault(require_Weekdays());
    var WeekNumbers_js_1 = __importDefault(require_WeekNumbers());
    var const_js_1 = require_const();
    function getCalendarTypeFromLocale(locale) {
      if (locale) {
        for (var _i = 0, _a = Object.entries(const_js_1.CALENDAR_TYPE_LOCALES); _i < _a.length; _i++) {
          var _b = _a[_i], calendarType = _b[0], locales = _b[1];
          if (locales.includes(locale)) {
            return calendarType;
          }
        }
      }
      return const_js_1.CALENDAR_TYPES.ISO_8601;
    }
    function MonthView(props) {
      var activeStartDate = props.activeStartDate, locale = props.locale, onMouseLeave = props.onMouseLeave, showFixedNumberOfWeeks = props.showFixedNumberOfWeeks;
      var _a = props.calendarType, calendarType = _a === void 0 ? getCalendarTypeFromLocale(locale) : _a, formatShortWeekday = props.formatShortWeekday, formatWeekday = props.formatWeekday, onClickWeekNumber = props.onClickWeekNumber, showWeekNumbers = props.showWeekNumbers, childProps = __rest(props, ["calendarType", "formatShortWeekday", "formatWeekday", "onClickWeekNumber", "showWeekNumbers"]);
      function renderWeekdays() {
        return (0, jsx_runtime_1.jsx)(Weekdays_js_1.default, { calendarType, formatShortWeekday, formatWeekday, locale, onMouseLeave });
      }
      function renderWeekNumbers() {
        if (!showWeekNumbers) {
          return null;
        }
        return (0, jsx_runtime_1.jsx)(WeekNumbers_js_1.default, { activeStartDate, calendarType, onClickWeekNumber, onMouseLeave, showFixedNumberOfWeeks });
      }
      function renderDays() {
        return (0, jsx_runtime_1.jsx)(Days_js_1.default, __assign({ calendarType }, childProps));
      }
      var className = "react-calendar__month-view";
      return (0, jsx_runtime_1.jsx)("div", { className: (0, clsx_1.default)(className, showWeekNumbers ? "".concat(className, "--weekNumbers") : ""), children: (0, jsx_runtime_1.jsxs)("div", { style: {
        display: "flex",
        alignItems: "flex-end"
      }, children: [renderWeekNumbers(), (0, jsx_runtime_1.jsxs)("div", { style: {
        flexGrow: 1,
        width: "100%"
      }, children: [renderWeekdays(), renderDays()] })] }) });
    }
  }
});

// node_modules/react-calendar/dist/cjs/Calendar.js
var require_Calendar = __commonJS({
  "node_modules/react-calendar/dist/cjs/Calendar.js"(exports) {
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var jsx_runtime_1 = require_jsx_runtime();
    var react_1 = require_react();
    var clsx_1 = __importDefault(require_clsx());
    var Navigation_js_1 = __importDefault(require_Navigation());
    var CenturyView_js_1 = __importDefault(require_CenturyView());
    var DecadeView_js_1 = __importDefault(require_DecadeView());
    var YearView_js_1 = __importDefault(require_YearView());
    var MonthView_js_1 = __importDefault(require_MonthView());
    var dates_js_1 = require_dates();
    var utils_js_1 = require_utils();
    var baseClassName = "react-calendar";
    var allViews = ["century", "decade", "year", "month"];
    var allValueTypes = ["decade", "year", "month", "day"];
    var defaultMinDate = /* @__PURE__ */ new Date();
    defaultMinDate.setFullYear(1, 0, 1);
    defaultMinDate.setHours(0, 0, 0, 0);
    var defaultMaxDate = /* @__PURE__ */ new Date(864e13);
    function toDate(value) {
      if (value instanceof Date) {
        return value;
      }
      return new Date(value);
    }
    function getLimitedViews(minDetail, maxDetail) {
      return allViews.slice(allViews.indexOf(minDetail), allViews.indexOf(maxDetail) + 1);
    }
    function isViewAllowed(view, minDetail, maxDetail) {
      var views = getLimitedViews(minDetail, maxDetail);
      return views.indexOf(view) !== -1;
    }
    function getView(view, minDetail, maxDetail) {
      if (!view) {
        return maxDetail;
      }
      if (isViewAllowed(view, minDetail, maxDetail)) {
        return view;
      }
      return maxDetail;
    }
    function getValueType(view) {
      var index = allViews.indexOf(view);
      return allValueTypes[index];
    }
    function getValue(value, index) {
      var rawValue = Array.isArray(value) ? value[index] : value;
      if (!rawValue) {
        return null;
      }
      var valueDate = toDate(rawValue);
      if (Number.isNaN(valueDate.getTime())) {
        throw new Error("Invalid date: ".concat(value));
      }
      return valueDate;
    }
    function getDetailValue(_a, index) {
      var value = _a.value, minDate = _a.minDate, maxDate = _a.maxDate, maxDetail = _a.maxDetail;
      var valuePiece = getValue(value, index);
      if (!valuePiece) {
        return null;
      }
      var valueType = getValueType(maxDetail);
      var detailValueFrom = function() {
        switch (index) {
          case 0:
            return (0, dates_js_1.getBegin)(valueType, valuePiece);
          case 1:
            return (0, dates_js_1.getEnd)(valueType, valuePiece);
          default:
            throw new Error("Invalid index value: ".concat(index));
        }
      }();
      return (0, utils_js_1.between)(detailValueFrom, minDate, maxDate);
    }
    var getDetailValueFrom = function(args) {
      return getDetailValue(args, 0);
    };
    var getDetailValueTo = function(args) {
      return getDetailValue(args, 1);
    };
    var getDetailValueArray = function(args) {
      return [getDetailValueFrom, getDetailValueTo].map(function(fn) {
        return fn(args);
      });
    };
    function getActiveStartDate(_a) {
      var maxDate = _a.maxDate, maxDetail = _a.maxDetail, minDate = _a.minDate, minDetail = _a.minDetail, value = _a.value, view = _a.view;
      var rangeType = getView(view, minDetail, maxDetail);
      var valueFrom = getDetailValueFrom({
        value,
        minDate,
        maxDate,
        maxDetail
      }) || /* @__PURE__ */ new Date();
      return (0, dates_js_1.getBegin)(rangeType, valueFrom);
    }
    function getInitialActiveStartDate(_a) {
      var activeStartDate = _a.activeStartDate, defaultActiveStartDate = _a.defaultActiveStartDate, defaultValue = _a.defaultValue, defaultView = _a.defaultView, maxDate = _a.maxDate, maxDetail = _a.maxDetail, minDate = _a.minDate, minDetail = _a.minDetail, value = _a.value, view = _a.view;
      var rangeType = getView(view, minDetail, maxDetail);
      var valueFrom = activeStartDate || defaultActiveStartDate;
      if (valueFrom) {
        return (0, dates_js_1.getBegin)(rangeType, valueFrom);
      }
      return getActiveStartDate({
        maxDate,
        maxDetail,
        minDate,
        minDetail,
        value: value || defaultValue,
        view: view || defaultView
      });
    }
    function getIsSingleValue(value) {
      return value && (!Array.isArray(value) || value.length === 1);
    }
    function areDatesEqual(date1, date2) {
      return date1 instanceof Date && date2 instanceof Date && date1.getTime() === date2.getTime();
    }
    var Calendar = (0, react_1.forwardRef)(function Calendar2(props, ref) {
      var activeStartDateProps = props.activeStartDate, allowPartialRange = props.allowPartialRange, calendarType = props.calendarType, className = props.className, defaultActiveStartDate = props.defaultActiveStartDate, defaultValue = props.defaultValue, defaultView = props.defaultView, formatDay = props.formatDay, formatLongDate = props.formatLongDate, formatMonth = props.formatMonth, formatMonthYear = props.formatMonthYear, formatShortWeekday = props.formatShortWeekday, formatWeekday = props.formatWeekday, formatYear = props.formatYear, _a = props.goToRangeStartOnSelect, goToRangeStartOnSelect = _a === void 0 ? true : _a, inputRef = props.inputRef, locale = props.locale, _b = props.maxDate, maxDate = _b === void 0 ? defaultMaxDate : _b, _c = props.maxDetail, maxDetail = _c === void 0 ? "month" : _c, _d = props.minDate, minDate = _d === void 0 ? defaultMinDate : _d, _e = props.minDetail, minDetail = _e === void 0 ? "century" : _e, navigationAriaLabel = props.navigationAriaLabel, navigationAriaLive = props.navigationAriaLive, navigationLabel = props.navigationLabel, next2AriaLabel = props.next2AriaLabel, next2Label = props.next2Label, nextAriaLabel = props.nextAriaLabel, nextLabel = props.nextLabel, onActiveStartDateChange = props.onActiveStartDateChange, onChangeProps = props.onChange, onClickDay = props.onClickDay, onClickDecade = props.onClickDecade, onClickMonth = props.onClickMonth, onClickWeekNumber = props.onClickWeekNumber, onClickYear = props.onClickYear, onDrillDown = props.onDrillDown, onDrillUp = props.onDrillUp, onViewChange = props.onViewChange, prev2AriaLabel = props.prev2AriaLabel, prev2Label = props.prev2Label, prevAriaLabel = props.prevAriaLabel, prevLabel = props.prevLabel, _f = props.returnValue, returnValue = _f === void 0 ? "start" : _f, selectRange = props.selectRange, showDoubleView = props.showDoubleView, showFixedNumberOfWeeks = props.showFixedNumberOfWeeks, _g = props.showNavigation, showNavigation = _g === void 0 ? true : _g, showNeighboringCentury = props.showNeighboringCentury, showNeighboringDecade = props.showNeighboringDecade, _h = props.showNeighboringMonth, showNeighboringMonth = _h === void 0 ? true : _h, showWeekNumbers = props.showWeekNumbers, tileClassName = props.tileClassName, tileContent = props.tileContent, tileDisabled = props.tileDisabled, valueProps = props.value, viewProps = props.view;
      var _j = (0, react_1.useState)(defaultActiveStartDate), activeStartDateState = _j[0], setActiveStartDateState = _j[1];
      var _k = (0, react_1.useState)(null), hoverState = _k[0], setHoverState = _k[1];
      var _l = (0, react_1.useState)(Array.isArray(defaultValue) ? defaultValue.map(function(el) {
        return el !== null ? toDate(el) : null;
      }) : defaultValue !== null && defaultValue !== void 0 ? toDate(defaultValue) : null), valueState = _l[0], setValueState = _l[1];
      var _m = (0, react_1.useState)(defaultView), viewState = _m[0], setViewState = _m[1];
      var activeStartDate = activeStartDateProps || activeStartDateState || getInitialActiveStartDate({
        activeStartDate: activeStartDateProps,
        defaultActiveStartDate,
        defaultValue,
        defaultView,
        maxDate,
        maxDetail,
        minDate,
        minDetail,
        value: valueProps,
        view: viewProps
      });
      var value = function() {
        var rawValue = function() {
          if (selectRange && getIsSingleValue(valueState)) {
            return valueState;
          }
          return valueProps !== void 0 ? valueProps : valueState;
        }();
        if (!rawValue) {
          return null;
        }
        return Array.isArray(rawValue) ? rawValue.map(function(el) {
          return el !== null ? toDate(el) : null;
        }) : rawValue !== null ? toDate(rawValue) : null;
      }();
      var valueType = getValueType(maxDetail);
      var view = getView(viewProps || viewState, minDetail, maxDetail);
      var views = getLimitedViews(minDetail, maxDetail);
      var hover = selectRange ? hoverState : null;
      var drillDownAvailable = views.indexOf(view) < views.length - 1;
      var drillUpAvailable = views.indexOf(view) > 0;
      var getProcessedValue = (0, react_1.useCallback)(function(value2) {
        var processFunction = function() {
          switch (returnValue) {
            case "start":
              return getDetailValueFrom;
            case "end":
              return getDetailValueTo;
            case "range":
              return getDetailValueArray;
            default:
              throw new Error("Invalid returnValue.");
          }
        }();
        return processFunction({
          maxDate,
          maxDetail,
          minDate,
          value: value2
        });
      }, [maxDate, maxDetail, minDate, returnValue]);
      var setActiveStartDate = (0, react_1.useCallback)(function(nextActiveStartDate, action) {
        setActiveStartDateState(nextActiveStartDate);
        var args = {
          action,
          activeStartDate: nextActiveStartDate,
          value,
          view
        };
        if (onActiveStartDateChange && !areDatesEqual(activeStartDate, nextActiveStartDate)) {
          onActiveStartDateChange(args);
        }
      }, [activeStartDate, onActiveStartDateChange, value, view]);
      var onClickTile = (0, react_1.useCallback)(function(value2, event) {
        var callback = function() {
          switch (view) {
            case "century":
              return onClickDecade;
            case "decade":
              return onClickYear;
            case "year":
              return onClickMonth;
            case "month":
              return onClickDay;
            default:
              throw new Error("Invalid view: ".concat(view, "."));
          }
        }();
        if (callback)
          callback(value2, event);
      }, [onClickDay, onClickDecade, onClickMonth, onClickYear, view]);
      var drillDown = (0, react_1.useCallback)(function(nextActiveStartDate, event) {
        if (!drillDownAvailable) {
          return;
        }
        onClickTile(nextActiveStartDate, event);
        var nextView = views[views.indexOf(view) + 1];
        if (!nextView) {
          throw new Error("Attempted to drill down from the lowest view.");
        }
        setActiveStartDateState(nextActiveStartDate);
        setViewState(nextView);
        var args = {
          action: "drillDown",
          activeStartDate: nextActiveStartDate,
          value,
          view: nextView
        };
        if (onActiveStartDateChange && !areDatesEqual(activeStartDate, nextActiveStartDate)) {
          onActiveStartDateChange(args);
        }
        if (onViewChange && view !== nextView) {
          onViewChange(args);
        }
        if (onDrillDown) {
          onDrillDown(args);
        }
      }, [
        activeStartDate,
        drillDownAvailable,
        onActiveStartDateChange,
        onClickTile,
        onDrillDown,
        onViewChange,
        value,
        view,
        views
      ]);
      var drillUp = (0, react_1.useCallback)(function() {
        if (!drillUpAvailable) {
          return;
        }
        var nextView = views[views.indexOf(view) - 1];
        if (!nextView) {
          throw new Error("Attempted to drill up from the highest view.");
        }
        var nextActiveStartDate = (0, dates_js_1.getBegin)(nextView, activeStartDate);
        setActiveStartDateState(nextActiveStartDate);
        setViewState(nextView);
        var args = {
          action: "drillUp",
          activeStartDate: nextActiveStartDate,
          value,
          view: nextView
        };
        if (onActiveStartDateChange && !areDatesEqual(activeStartDate, nextActiveStartDate)) {
          onActiveStartDateChange(args);
        }
        if (onViewChange && view !== nextView) {
          onViewChange(args);
        }
        if (onDrillUp) {
          onDrillUp(args);
        }
      }, [
        activeStartDate,
        drillUpAvailable,
        onActiveStartDateChange,
        onDrillUp,
        onViewChange,
        value,
        view,
        views
      ]);
      var onChange = (0, react_1.useCallback)(function(rawNextValue, event) {
        var previousValue = value;
        onClickTile(rawNextValue, event);
        var isFirstValueInRange = selectRange && !getIsSingleValue(previousValue);
        var nextValue;
        if (selectRange) {
          if (isFirstValueInRange) {
            nextValue = (0, dates_js_1.getBegin)(valueType, rawNextValue);
          } else {
            if (!previousValue) {
              throw new Error("previousValue is required");
            }
            if (Array.isArray(previousValue)) {
              throw new Error("previousValue must not be an array");
            }
            nextValue = (0, dates_js_1.getValueRange)(valueType, previousValue, rawNextValue);
          }
        } else {
          nextValue = getProcessedValue(rawNextValue);
        }
        var nextActiveStartDate = (
          // Range selection turned off
          !selectRange || // Range selection turned on, first value
          isFirstValueInRange || // Range selection turned on, second value, goToRangeStartOnSelect toggled on
          goToRangeStartOnSelect ? getActiveStartDate({
            maxDate,
            maxDetail,
            minDate,
            minDetail,
            value: nextValue,
            view
          }) : null
        );
        event.persist();
        setActiveStartDateState(nextActiveStartDate);
        setValueState(nextValue);
        var args = {
          action: "onChange",
          activeStartDate: nextActiveStartDate,
          value: nextValue,
          view
        };
        if (onActiveStartDateChange && !areDatesEqual(activeStartDate, nextActiveStartDate)) {
          onActiveStartDateChange(args);
        }
        if (onChangeProps) {
          if (selectRange) {
            var isSingleValue = getIsSingleValue(nextValue);
            if (!isSingleValue) {
              onChangeProps(nextValue || null, event);
            } else if (allowPartialRange) {
              if (Array.isArray(nextValue)) {
                throw new Error("value must not be an array");
              }
              onChangeProps([nextValue || null, null], event);
            }
          } else {
            onChangeProps(nextValue || null, event);
          }
        }
      }, [
        activeStartDate,
        allowPartialRange,
        getProcessedValue,
        goToRangeStartOnSelect,
        maxDate,
        maxDetail,
        minDate,
        minDetail,
        onActiveStartDateChange,
        onChangeProps,
        onClickTile,
        selectRange,
        value,
        valueType,
        view
      ]);
      function onMouseOver(nextHover) {
        setHoverState(nextHover);
      }
      function onMouseLeave() {
        setHoverState(null);
      }
      (0, react_1.useImperativeHandle)(ref, function() {
        return {
          activeStartDate,
          drillDown,
          drillUp,
          onChange,
          setActiveStartDate,
          value,
          view
        };
      }, [activeStartDate, drillDown, drillUp, onChange, setActiveStartDate, value, view]);
      function renderContent(next) {
        var currentActiveStartDate = next ? (0, dates_js_1.getBeginNext)(view, activeStartDate) : (0, dates_js_1.getBegin)(view, activeStartDate);
        var onClick = drillDownAvailable ? drillDown : onChange;
        var commonProps = {
          activeStartDate: currentActiveStartDate,
          hover,
          locale,
          maxDate,
          minDate,
          onClick,
          onMouseOver: selectRange ? onMouseOver : void 0,
          tileClassName,
          tileContent,
          tileDisabled,
          value,
          valueType
        };
        switch (view) {
          case "century": {
            return (0, jsx_runtime_1.jsx)(CenturyView_js_1.default, __assign({ formatYear, showNeighboringCentury }, commonProps));
          }
          case "decade": {
            return (0, jsx_runtime_1.jsx)(DecadeView_js_1.default, __assign({ formatYear, showNeighboringDecade }, commonProps));
          }
          case "year": {
            return (0, jsx_runtime_1.jsx)(YearView_js_1.default, __assign({ formatMonth, formatMonthYear }, commonProps));
          }
          case "month": {
            return (0, jsx_runtime_1.jsx)(MonthView_js_1.default, __assign({ calendarType, formatDay, formatLongDate, formatShortWeekday, formatWeekday, onClickWeekNumber, onMouseLeave: selectRange ? onMouseLeave : void 0, showFixedNumberOfWeeks: typeof showFixedNumberOfWeeks !== "undefined" ? showFixedNumberOfWeeks : showDoubleView, showNeighboringMonth, showWeekNumbers }, commonProps));
          }
          default:
            throw new Error("Invalid view: ".concat(view, "."));
        }
      }
      function renderNavigation() {
        if (!showNavigation) {
          return null;
        }
        return (0, jsx_runtime_1.jsx)(Navigation_js_1.default, { activeStartDate, drillUp, formatMonthYear, formatYear, locale, maxDate, minDate, navigationAriaLabel, navigationAriaLive, navigationLabel, next2AriaLabel, next2Label, nextAriaLabel, nextLabel, prev2AriaLabel, prev2Label, prevAriaLabel, prevLabel, setActiveStartDate, showDoubleView, view, views });
      }
      var valueArray = Array.isArray(value) ? value : [value];
      return (0, jsx_runtime_1.jsxs)("div", { className: (0, clsx_1.default)(baseClassName, selectRange && valueArray.length === 1 && "".concat(baseClassName, "--selectRange"), showDoubleView && "".concat(baseClassName, "--doubleView"), className), ref: inputRef, children: [renderNavigation(), (0, jsx_runtime_1.jsxs)("div", { className: "".concat(baseClassName, "__viewContainer"), onBlur: selectRange ? onMouseLeave : void 0, onMouseLeave: selectRange ? onMouseLeave : void 0, children: [renderContent(), showDoubleView ? renderContent(true) : null] })] });
    });
    exports.default = Calendar;
  }
});
export default require_Calendar();
//# sourceMappingURL=react-calendar_dist_cjs_Calendar__js.js.map
